@page
@model IndexModel
@{
    ViewData["Title"] = "Home Page";
}

@*CSS*@
<style>
    h1 {
        color: #333;
    }

    .heroContainer {
        display: flex;
        flex-direction: column;
        margin: 0 auto;
    }

        .heroContainer p {
            margin-bottom: 30px;
        }

    .secondBox {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
        max-width: 400px;
    }

    .secondBox > button {
        border-radius: 3px;
        cursor: pointer;

    }

    .startBtn {
        background-color: green;
        font-weight: bold;
    }

    .stopBtn {
        background-color: red;
        font-weight: bold;
    }

    .continueBtn {
        background-color: coral;
        font-weight: bold;
    }

</style>

@*HTML*@

<h1>Monitor tab</h1>


<div class="heroContainer">

    @*Dropdown for batch ID*@
    <div class="dropDownBatch">
        <label for="batch-id">Choose your batch ID:</label>
        <select name="batch-id" id="batch-id">
            <option value="1">Batch ID 1</option>
            <option value="2">Batch ID 2</option>
            <option value="3">Batch ID 3</option>
        </select>
       
    </div>

    @*Monitoring*@
    <p>Type</p>
    <p>Successfull/Failed Batch</p>
    <p>Products Produced</p>
    <p>Quantity</p>
    <p>Successful Amount</p>
    <p>Production Speed</p>
    <p>Speed</p>
    <p>Failed amount</p>

    <label for="stop_reason">Stop Reason:</label>
    <p id="stop_reason"></p>

    <label for="state_current">State Current:</label>
    <p id="state_current"></p>

    @*Start, stop, continue buttons*@
    <div class="secondBox">
        <button class="startBtn">Start</button>
        <button class="stopBtn">Stop</button>
        <button class="continueBtn">Continue</button>
    </div>

    <script>
        //This function fetches information, such as ther Stop Reason or State Current, from the server and updates the text in the "Monitor Tab". 
        function get_Status(parameter, targetElementId) {
            fetch(`/Semester_3_Projekt.controller/BeerMachineAPI/${parameter}`)
                .then(response => response.text())
                .then(status => {
                    //Theis part updates the text for the specified parameter. 
                    document.getElementById(targetElementId).innerText = status;
                })
                .catch(error => console.error(`Error fetching ${parameter}:`, error));
        }

        //This function disables the "Start", "Stop" and "Continue" buttons based on the state_current value. 
        function disableButtons_State(state_current) {
            const startBtn = document.querySelector('.startBtn');
            const stopBtn = document.querySelector('.stopBtn');
            const continueBtn = document.querySelector('.continueBtn');

            //This switch-case uses state_currentto enable and disable the buttons. 
            if (state_current === 'Suspended') {
                startBtn.disabled = true;
                stopBtn.disabled = true;
                continueBtn.disabled = false;
            } else {
                //This part combines the states of "Stopped", "Idle", "Aborted", and "Complete".
                startBtn.disabled = false;
                stopBtn.disabled = true;
                continueBtn.disabled = true;
            }
        }

        //This part calls the function using the different parameters when the page is loaded or reloaded. 
        window.onload = function () {
            get_Status('stop_Reasons', 'stop_reason');
            get_Status('state_Current', 'state_current');
            disableButtons_State(state_current);
        };
    </script>
</div>

