@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Home Page";
}


<head>
    <meta charset="UTF-8" />
    <link rel="stylesheet" href="css/index.css" />
</head>

<h1>Monitor tab CONTROLLER</h1>

<div class="alertPopup" id="statusAlert">Status: Idle</div>

<div class="heroContainer">

    @*Dropdown for batch ID*@
    <div class="dropDownBatch">
        <label for="batch-id">Batch ID:</label>
        <select name="batch-id" id="batch-id">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
        </select>
    </div>

    @*Monitoring*@
    <div class="infoBoxes">
        <div class="box"><label name="batchId" id="batchId">Batch id: </label></div>
        <div class="box"><label name="BeerType" id="beerType">Type: </label></div>
        <div class="box"><label name="producedProducts" id="producedProducts">Products Produced: </label></div>
        <div class="box"><label name="quantity" id="quantity">Quantity: </label></div>
        <div class="box"><label name="goodProducts" id="goodProducts">Successful Amount: </label></div>
        <div class="box"><label name="badProducts" id="badProducts">Failed Amount: </label></div>
        <div class="box"><label name="setSpeed" id="setSpeed">Production Speed: </label></div>
        <div class="box"><label name="curSpeed" id="curSpeed">Speed: </label></div>
        <div class="box" name="Barley"><label name="barleyAmount" id="barleyAmount">Barley Amount: </label></div>
        <div class="box" name="Hops"><label name="hopsAmount" id="hopsAmount">Hops Amount: </label></div>
        <div class="box" name="Malt"><label name="maltAmount" id="maltAmount">Malt Amount: </label></div>
        <div class="box" name="Wheat"><label name="wheatAmount" id="wheatAmount">Wheat Amount: </label></div>
        <div class="box" name="Yeast"><label name="yeastAmount" id="yeastAmount">Yeast Amount: </label></div>
        <div class="box" name="StopReason"><label name="stopReason" id="stopReason">Yeast Amount: </label></div>

    </div>

    @*Start, stop, continue buttons*@
    <div class="secondBox">
        <button class="startBtn">Start</button>
        <button class="stopBtn">Stop</button>
        <button class="continueBtn">Continue</button>
    </div>

</div>




<!-- Monitor update AJAX call -->

<script src="js/jquery.js" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function monitor_update() {
        $.ajax({
            type: "GET",
            url: "@Url.Action("update_monitor")",
            dataType: "json",
            success: function(response) {
                document.getElementById("batchId").innerHTML = "Batch id: " + response["value"]["batchID"];
                document.getElementById("beerType").innerHTML = "Type: " + response["value"]["beerType"];
                document.getElementById("producedProducts").innerHTML = "Products produced: " + response["value"]["producedProducts"];
                document.getElementById("quantity").innerHTML = "Quantity: " + response["value"]["quantity"];
                document.getElementById("goodProducts").innerHTML = "Successful Amount: " + response["value"]["goodProducts"];
                document.getElementById("badProducts").innerHTML = "Failed Amount: " + response["value"]["badProducts"];
                document.getElementById("setSpeed").innerHTML = "Production Speed: " + response["value"]["setSpeed"];
                document.getElementById("curSpeed").innerHTML = "Speed: " + response["value"]["curSpeed"];
                document.getElementById("barleyAmount").innerHTML = "Barley Amount: " + response["value"]["barleyAmount"];
                document.getElementById("hopsAmount").innerHTML = "Hops Amount: " + response["value"]["hopsAmount"];
                document.getElementById("maltAmount").innerHTML = "Malt Amount: " + response["value"]["maltAmount"];
                document.getElementById("wheatAmount").innerHTML = "Wheat Amount: " + response["value"]["wheatAmount"];
                document.getElementById("yeastAmount").innerHTML = "Yeast Amount: " + response["value"]["yeastAmount"];
                document.getElementById("statusAlert").innerHTML = "Status: " + response["value"]["state"]
                document.getElementById("stopReason").innerHTML = "Stop Reason: " + response["value"]["stopReason"]
                updateButtonStates(response["value"]["state"], response["value"]["batchID"]);
                setTimeout(monitor_update, 5000);
            },
            failure: function(jqXHR, textStatus, errorThrown) {
                alert("HTTP Status: " + jqXHR.status + "; Error Text: " + jqXHR.responseText);
            }
            });
        $(".startBtn").click(function () {
            console.log("Start button clicked");
            button_actions("start");
        });

        $(".stopBtn").click(function () {
            console.log("Stop button clicked");
            button_actions("stop");
        });

        $(".continueBtn").click(function () {
            console.log("Continue button clicked");
            button_actions("continue");
        });

        //This part uses the appropriate function in the Monitor Controller whenever a button is clicked in the Monitor Tab.
        function button_actions(action) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("button_actions")",
                data: { function: action },
                dataType: "json",
                success: function (response) {
                    console.log(response);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("HTTP Status: " + jqXHR.status + "; Error Text: " + jqXHR.responseText);
                }
            });
        }

        //This function enables and disables the buttons based on the Current State of the machine.
        function updateButtonStates(state_current, batch_id) {
            var startBtn = $(".startBtn");
            var stopBtn = $(".stopBtn");
            var continueBtn = $(".continueBtn");

            //If the current state is "Stopped", then the Stop-button is disabled. 
            if (state_current == 2) {
                startBtn.prop('disabled', true);
                stopBtn.prop('disabled', true);
                continueBtn.prop('disabled', false);
            } else -if (state_current == 6) {
                //If the current state is "Execute", then the Stop-button is enabled and the other buttons are disabled.
                startBtn.prop('disabled', true);
                stopBtn.prop('disabled', false);
                continueBtn.prop('disabled', true);
            } else -if (state_current == 4) {
                //If the current state is "Idle", then the Stop-button is disabled and the other buttons are enabled.
                startBtn.prop('disabled', false);
                stopBtn.prop('disabled', true);
                continueBtn.prop('disabled', false);
            } else -if (state_current == 6 || state_current == 9) {
                //If the current state is "Aborted" or "Complete", then the Start-button is enabled and the other buttons are disabled.
                startBtn.prop('disabled', false);
                stopBtn.prop('disabled', true);
                continueBtn.prop('disabled', true);
            } else {
                //This part combines the other states, because we shouldn't be able to do change the process in these states.
                startBtn.prop('disabled', true);
                stopBtn.prop('disabled', true);
                continueBtn.prop('disabled', true);
            }
            if (batch_id == -1) {
                startBtn.prop('disabled', true);
                stopBtn.prop('disabled', true);
                continueBtn.prop('disabled', true);
            }
        }
    });


</script>
